/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author bl
 */

package View;


import java.util.Hashtable;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import java.awt.event.*;

public class rules extends javax.swing.JPanel {
    JFrame frame;
    JPanel menu;

    /**
     * Creates new form rules
     */
    public rules(JFrame f, JPanel menu) {
        frame = f;
        this.menu = menu;
        initComponents();
    }

    public void updaterules(JPanel menu) {
        this.menu = menu;
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        rules_text = new javax.swing.JLabel();
        rules_back = new javax.swing.JLabel();
        rules_title = new javax.swing.JLabel();
        rules_bg = new javax.swing.JLabel();

        setAutoscrolls(true);
        setPreferredSize(new java.awt.Dimension(800, 720));
        setLayout(null);

        rules_text.setText(
                "<HTML>1. In turns, each player moves 1 BEAD along the marked lines to an adjacent empty point, or they can capture an opponent’s BEAD<BR><BR> 2. A player can capture either by Approach or by Withdrawal.<BR> <BR> 3. During an Approach capture, a player moves their BEAD to a point adjacent to their opponent’s BEAD. The BEAD is only captured if the BEAD is on the continuum of the capturing BEADs movement.<BR> <BR> 4. During a Withdrawal capture, a player will move their BEAD from a point adjacent to their opponent’s BEAD. The BEAD is only captured if the BEAD is on a continuum of the capturing BEADs movement.<BR> <BR> 5. When a player’s BEAD is captured, all their BEADS in an uninterrupted line beyond the capturing BEAD are also captured.<BR> <BR> 6. A player cannot make an Approach and Withdrawal capture at the same time – the player must choose one.<BR> <BR> 7. A player can make multiple captures during their turn, but their BEAD cannot land on the same intersection more than once each turn and must alternate between an Approach and a Withdrawal capture.<BR> <BR> 8. Making multiple captures in a single turn is optional.<BR> <BR> 9. On a player’s first move of the game, only one capture is allowed.<BR> <BR> 10. Captured BEADs are removed from the board.<BR> </HTML> ");
        add(rules_text);
        rules_text.setBounds(150, 90, 510, 460);

        rules_back.setIcon(new javax.swing.ImageIcon(("View/ressources/cancel_big.png"))); // NOI18N
        add(rules_back);
        rules_back.setBounds(350, 560, 103, 110);
        rules_back.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                frame.getContentPane().removeAll();
                frame.add(menu);
                frame.setVisible(true);
                frame.repaint();
            }

        });

        rules_title.setIcon(new javax.swing.ImageIcon(("View/ressources/rules_title.png"))); // NOI18N
        add(rules_title);
        rules_title.setBounds(20, 30, 100, 100);

        rules_bg.setIcon(new javax.swing.ImageIcon(("View/ressources/2512129.jpg"))); // NOI18N
        add(rules_bg);
        rules_bg.setBounds(0, 0, 800, 720);
    }// </editor-fold>

    private void rules_backMouseClicked(java.awt.event.MouseEvent evt) {
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel rules_text;
    private javax.swing.JLabel rules_back;
    private javax.swing.JLabel rules_bg;
    private javax.swing.JLabel rules_title;
    // End of variables declaration
}
